<?xml version="1.0" encoding="utf-8"?>
<root>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
  <data name="Button_TestIt" xml:space="preserve">
    <value>TEST IT</value>
  </data>
  <data name="ErrorButton_Retry" xml:space="preserve">
    <value>RETRY</value>
  </data>
  <data name="ErrorType_Network" xml:space="preserve">
    <value>Network Error thrown</value>
  </data>
  <data name="ErrorType_NoData" xml:space="preserve">
    <value>No Data returned</value>
  </data>
  <data name="ErrorType_None" xml:space="preserve">
    <value>No Error</value>
  </data>
  <data name="ErrorType_Server" xml:space="preserve">
    <value>Server Exception thrown</value>
  </data>
  <data name="ErrorType_Unknown" xml:space="preserve">
    <value>Unknown Error thrown</value>
  </data>
  <data name="Error_Business" xml:space="preserve">
    <value>\"It's not me, it's the backend.\"</value>
    <comment>server.png</comment>
  </data>
  <data name="Error_Network" xml:space="preserve">
    <value>Couldn't reach the Internet.</value>
    <comment>the_internet.png</comment>
  </data>
  <data name="Error_Unknown" xml:space="preserve">
    <value>\"An ill wind is blowing...\"</value>
    <comment>richmond.jpg</comment>
  </data>
  <data name="DefaultLayout_Description_1" xml:space="preserve">
    <value>`TaskLoaderView` provides defaults layout for all the views matching your task states (Loading/Error/Success/Notification).</value>
  </data>
  <data name="DefaultLayout_Description_2" xml:space="preserve">
    <value>Those layouts are stylable, you can provide converters for error image and message.
Set the loader color, the retry button text, the font family used....</value>
  </data>
  <data name="DefaultLayout_Title" xml:space="preserve">
    <value>Default  Views</value>
  </data>
  <data name="Title_TaskLoaderView" xml:space="preserve">
    <value>Sharpnado's TaskLoaderView</value>
  </data>
  <data name="ErrorEmulator_Title" xml:space="preserve">
    <value>Error Emulation</value>
  </data>
  <data name="CustomLayout_Description_1" xml:space="preserve">
    <value>You can define your own views for each task state.</value>
  </data>
  <data name="CustomLayout_Description_2" xml:space="preserve">
    <value>The `TaskLoaderView` uses an AbsoluteLayout, so you can even position your custom views very precisely.</value>
  </data>
  <data name="CustomLayout_Title" xml:space="preserve">
    <value>User Custom Views</value>
  </data>
  <data name="Empty_Screen" xml:space="preserve">
    <value>Nothing here folks.</value>
  </data>
  <data name="ErrorType_ErrorOnRefresh" xml:space="preserve">
    <value>Error On Refresh</value>
  </data>
  <data name="Lottie_Description" xml:space="preserve">
    <value>Use Lottie files to unlock next level UI.
    </value>
  </data>
  <data name="Lottie_Title" xml:space="preserve">
    <value>Lottie Animations</value>
  </data>
  <data name="NotStartedView_Description" xml:space="preserve">
    <value>Create a custom user NotStartedView to display a view before the Task is ran.
You can for example use it to start your task on demand.
    </value>
  </data>
  <data name="NotStartedView_Title" xml:space="preserve">
    <value>Not Started View</value>
  </data>
  <data name="SkeletonLoading_Description_1" xml:space="preserve">
    <value>Supports the excellent Xamarin.Forms.Skeleton loading package by Horus.</value>
  </data>
  <data name="SkeletonLoading_Description_2" xml:space="preserve">
    <value>Find an easier implementation of the pattern with static dummy entities.</value>
  </data>
  <data name="SkeletonLoading_Title" xml:space="preserve">
    <value>Skeleton loading</value>
  </data>
  <data name="Commands_Description_1" xml:space="preserve">
    <value>You can bind a `TaskLoaderCommand` to any views to display UI feedback matching your command task state.</value>
  </data>
  <data name="Commands_Description_2" xml:space="preserve">
    <value>It works super well with `CompositeTaskLoaderNotifier` and `Snackbar` :)</value>
  </data>
  <data name="Commands_Title" xml:space="preserve">
    <value>Commands/Snackbar</value>
  </data>
</root>

